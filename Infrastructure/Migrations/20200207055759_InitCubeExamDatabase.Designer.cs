// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200207055759_InitCubeExamDatabase")]
    partial class InitCubeExamDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MapType")
                        .HasColumnType("int");

                    b.Property<int>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Domain.Entities.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("Domain.Entities.Shape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Shapes");
                });

            modelBuilder.Entity("Domain.Entities.Map", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.CoordinatePoint", "Center", b1 =>
                        {
                            b1.Property<int>("MapId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double?>("Latitude")
                                .IsRequired()
                                .HasColumnName("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .IsRequired()
                                .HasColumnName("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("MapId");

                            b1.ToTable("Maps");

                            b1.WithOwner()
                                .HasForeignKey("MapId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Marker", b =>
                {
                    b.HasOne("Domain.Entities.Map", "Map")
                        .WithMany("Markers")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.CoordinatePoint", "Position", b1 =>
                        {
                            b1.Property<int>("MarkerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double?>("Latitude")
                                .IsRequired()
                                .HasColumnName("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .IsRequired()
                                .HasColumnName("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("MarkerId");

                            b1.ToTable("Markers");

                            b1.WithOwner()
                                .HasForeignKey("MarkerId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Shape", b =>
                {
                    b.HasOne("Domain.Entities.Map", "Map")
                        .WithMany("Shapes")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
